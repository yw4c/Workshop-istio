# 判斷 path, e.g. /private
# 打到指定 service
# filter reference : https://help.aliyun.com/document_detail/158520.html
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: auth-filter
  namespace: ares
spec:
  workloadSelector:
    # select by label in the same namespace
    labels:
      auth-injection: enabled
#      app: ws001-api
  # configPatches 具有匹配條件的一個或多個補丁kue
  configPatches:
  #  applyTo 指定在Envoy配置中的哪個位置應應用給定的補丁。
    #      INVALID LISTENER 將修補程序應用於偵聽器。
    #      FILTER_CHAIN 將補丁應用到過濾器鏈。
    #      NETWORK_FILTER 將補丁應用到網絡過濾器鏈，以修改現有過濾器或添加新過濾器。
    #      HTTP_FILTER 將修補程序應用於http連接管理器中的HTTP過濾器鏈，以修改現有過濾器或添加新過濾器。
    #      ROUTE_CONFIGURATION 將修補程序應用於HTTP連接管理器中的Route配置（rds輸出）。 這不適用於虛擬主機。 當前，僅允許在路由配置對像上執行MERGE操作。
    #      VIRTUAL_HOST 將修補程序應用於路由配置內的虛擬主機。
    #      HTTP_ROUTE 將修補程序應用於路由配置中匹配的虛擬主機內部的路由對象。 當前，僅允許對路線對象執行MERGE操作。 群集將修補程序應用於CDS輸出中的群集。 也用於添加新集群。
  - applyTo: HTTP_FILTER
    match:
      # context : listener 會使用這補丁
      #         ANY: All listeners
      #         SIDECAR_INBOUND: Inbound listener in sidecar
      #         SIDECAR_OUTBOUND: Outbound listener in sidecar
      #         GATEWAY: Gateway listener
      context: SIDECAR_INBOUND
      listener:
#        portNumber: 7001 # 不限定 service
        filterChain:
          filter:
            name: "envoy.http_connection_manager"
            subFilter:
              name: "envoy.router"
    patch:
      # Operation
      #        MERGE: 使用json合併語義將提供的配置與生成的配置合併。
      #        ADD: 將提供的配置添加到現有列表
      #        REMOVE: 從列表中刪除所選對象
      #        # INSERT 在命名對像數組上執行插入操作。此操作通常僅在過濾器的上下文中有用，過濾器的順序很重要
      #        INSERT_BEFORE: 在所選過濾器或子過濾器之前插入。
      #        INSERT_AFTER: 指定的過濾器將插入列表的末尾
      operation: INSERT_BEFORE
      value: # lua filter specification
        name: envoy.lua
        config:
          # api reference : https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/lua_filter
#          "@type": "type.googleapis.com/envoy.config.filter.http.lua.v2.Lua"
          # func only trigger by path: /api
          # auth-url: GET ws003-auth.ares.svc.local:7003/validate
          # httpCall reference: https://discuss.istio.io/t/how-to-add-clusters-envoy-in-istio-for-envoyfilter/1133
          inlineCode: |-
            function envoy_on_request(request_handle)
              local headers = request_handle:headers()

              -- 檢查 path 是否需要驗證
              path = headers:get(":path")
              request_handle:logCritical("path" .. path)
              if path:match("^/api") then
                request_handle:logCritical("the path in rule")
              else
                request_handle:logCritical("the path not in rule, skip")
                do return end
              end

              -- Get Token
              local auth = headers:get("Authorization")

              -- Invoke auth service, 轉發 token
              local respHeaders, respBody = request_handle:httpCall(
              "outbound|7003||ws003-auth.ares.svc.cluster.local",
              {
                [":method"] = "GET",
                [":path"] = "/validate",
                [":authority"] = "ws003-auth.ares.svc.cluster.local",
                ["Authorization"] = auth,
              },
              "authorize call",
              5000)

              -- response status
              local status =  respHeaders[":status"]
              if tonumber(status)>=400 then
                 -- Deny
                 request_handle:respond(
                     {[":status"] = "403"},
                     "{Code: \"40300\", Msg: \"identity invalid\"}")
                  do return end
              end

            end