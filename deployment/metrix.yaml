# Configuration for a metric measuring bytes sent from a server
# to a client
apiVersion: config.istio.io/v1alpha2
kind: instance
metadata:
  name: ws002-pingpongsentbytes
spec:
  compiledTemplate: metric
  params:
    value: connection.sent.bytes | 0 # uses a TCP-specific attribute
    dimensions:
      source_service: source.workload.name | "unknown"
      source_version: source.labels["version"] | "unknown"
      destination_version: destination.labels["version"] | "unknown"
    monitoredResourceType: '"UNSPECIFIED"'
---
# Configuration for a metric measuring bytes sent from a client
# to a server
apiVersion: config.istio.io/v1alpha2
kind: instance
metadata:
  name: ws002-pingpongreceivedbytes
spec:
  compiledTemplate: metric
  params:
    value: connection.received.bytes | 0 # uses a TCP-specific attribute
    dimensions:
      source_service: source.workload.name | "unknown"
      source_version: source.labels["version"] | "unknown"
      destination_version: destination.labels["version"] | "unknown"
    monitoredResourceType: '"UNSPECIFIED"'
---
# Configuration for a Prometheus handler
apiVersion: config.istio.io/v1alpha2
kind: handler
metadata:
  name: ws002-pingponghandler
spec:
  compiledAdapter: prometheus
  params:
    metrics:
      - name: ws002-pingpong_sent_bytes # Prometheus metric name
        instance_name: ws002-pingpongsentbytes.instance.default # Mixer instance name (fully-qualified)
        kind: COUNTER
        label_names:
          - source_service
          - source_version
          - destination_version
      - name: ws002-pingpong_received_bytes # Prometheus metric name
        instance_name: ws002-pingpongreceivedbytes.instance.default # Mixer instance name (fully-qualified)
        kind: COUNTER
        label_names:
          - source_service
          - source_version
          - destination_version
---
# Rule to send metric instances to a Prometheus handler
apiVersion: config.istio.io/v1alpha2
kind: rule
metadata:
  name: ws002-pingpongprom
spec:
  match: context.protocol == "tcp"
    && destination.service.host == "ws002-pingpong.default.svc.cluster.local"
  actions:
    - handler: ws002-pingponghandler
      instances:
        - ws002-pingpongreceivedbytes
        - ws002-pingpongsentbytes